package com.twq.dp.stock;

/**
 * 买卖股票的最佳时机 III
 *
 * 定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
 *
 * 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。
 *
 * 注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 *
 * 示例 1:
 *
 * 输入: [3,3,5,0,0,3,1,4]
 * 输出: 6
 * 解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
 *      随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
 * 示例 2:
 *
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
 *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
 *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3:
 *
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
 *
 * 链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii
 */
public class _123_BestTimeToBuyAndSellStock_iii {
    // 动态规划
    // 状态：dp[j] 表示状态为 j 的最大收益
    // j 的取值：
    //      j = 0 表示什么都不做
    //      j = 1 表示第一次买入
    //      j = 2 表示第一次卖出
    //      j = 3 表示第二次买入
    //      j = 4 表示第三次卖出
    public int maxProfit(int[] prices) {
        int len = prices.length;
        if (len < 2) return 0;

        int[] dp = new int[5];
        dp[1] = -prices[0];

        // 因为状态还没发生转移，所以第二次持股的收益都需要初始化为一个不可能的收益
        dp[3] = Integer.MIN_VALUE;

        // 状态转移
        for (int i = 1; i < len; i++) {
            dp[0] = 0;
            // 在区间 [0, i] 第一次买入的收益是下列两者收益的最大值：
            // 1. 第一次买入的收益
            // 2. 什么都不做然后在第 i 天买入的收益
            dp[1] = Math.max(dp[1], dp[0] - prices[i]);
            // 在区间 [0, i] 第一次卖出的收益是下列两者收益的最大值：
            // 1. 第一次卖出的收益
            // 2. 第一次买入然后在第 i 天卖出的收益
            dp[2] = Math.max(dp[2], dp[1] + prices[i]);
            // 在区间 [0, i] 第二次买入的收益是下列两者收益的最大值：
            // 1. 第二次买入的收益
            // 2. 第一次卖出然后在第 i 天买入的收益
            dp[3] = Math.max(dp[3], dp[2] - prices[i]);
            // 在区间 [0, i] 第二次卖出的收益是下列两者收益的最大值：
            // 1. 第二次卖出的收益
            // 2. 第二次买入然后在第 i 天卖出的收益
            dp[4] = Math.max(dp[4], dp[3] + prices[i]);
        }
        // 最大值只发生在不持股的时候，分别是：j = 0、j = 2、j = 4
        return Math.max(dp[0], Math.max(dp[2], dp[4]));
    }
}
