package com.twq.dp;

/**
 * 不同路径 II
 *
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 *
 * 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
 *
 * 网格中的障碍物和空位置分别用 1 和 0 来表示。
 *
 * 说明：m 和 n 的值均不超过 100。
 *
 * 示例 1:
 *
 * 输入:
 * [
 *   [0,0,0],
 *   [0,1,0],
 *   [0,0,0]
 * ]
 * 输出: 2
 * 解释:
 * 3x3 网格的正中间有一个障碍物。
 * 从左上角到右下角一共有 2 条不同的路径：
 * 1. 向右 -> 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右 -> 向右
 *
 * 链接：https://leetcode-cn.com/problems/unique-paths-ii
 */
public class _63_UniquePaths_ii {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        // 1. 状态定义
        // dp[i][j]：表示从点 (i, j) 到达右下角不同路径数
        int[][] dp = new int[m][n];

        // 2. 状态初始化
        // 2.1：初始化右下角(即终点)到终点的路径数
        // 如果终点不是障碍物的话，那么路径数初始化为 1
        if (obstacleGrid[m - 1][n - 1] == 0) {
            dp[m - 1][n - 1] = 1;
        } else { // 否则，终点就是障碍物，初始化为 0
            dp[m - 1][n - 1] = 0;
        }

        // 2.2：初始化最后一列所有点到终点的路径数
        // 原则：
        // 对最后一列从下往上搜索，只要碰到障碍物，那么含有障碍物这点以及上面的所有点的路径数都是 0
        // 因为在最后一列走的话，只能往下走，一旦发现了障碍物，则到不了终点
        for (int i = m - 2; i >= 0; i--) {
            // 最后一列的每个点符合下列二个条件的话，那么它到终点的路径数初始化为 1
            if (obstacleGrid[i][n - 1] == 0 // 条件一：当前点不是障碍物
                    && dp[i + 1][n - 1] == 1) { // 条件二：当前点的下一个点可以到达终点
                dp[i][n - 1] = 1;
            } else { // 否则，到不了终点
                dp[i][n - 1] = 0;
            }
        }
        // 2.3：初始化最后一行所有点到终点的路径数
        // 原则：
        // 对最后一行从右往左搜索，只要碰到障碍物，那么含有障碍物这点以及前面的所有点的路径数都是 0
        // 因为在最后一行走的话，只能往右走，一旦发现了障碍物，则到不了终点
        for (int i = n - 2; i >= 0; i--) {
            // 最后一列的每个点符合下列二个条件的话，那么它到终点的路径数初始化为 1
            if (obstacleGrid[m - 1][i] == 0 // 条件一：当前点不是障碍物
                    && dp[m - 1][i + 1] == 1) { // 条件二：当前点的后一个点可以到达终点
                dp[m - 1][i] = 1;
            } else {    // 否则，到不了终点
                dp[m - 1][i] = 0;
            }
        };

        // 3. 状态转移方程
        // 在注意边界条件的前提下，分以下两种情况：
        // 情况一：当前点不是障碍物，那么
        //      dp[i][j] = dp[i][j + 1] + dp[i + 1][j]，表达含义是：
        //      从点 (i, j) 到达右下角不同路径数等于下面两个路径数之和：
        //          1. 从 (i, j) 向右移动一格，即点 (i, j + 1) 到达右下角的路径数
        //          2. 从 (i, j) 向下移动一格，即点 (i + 1, j) 到达右下角的路径数
        // 情况二：当前点是障碍物，那么
        //      dp[i][j] = 0
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i != m - 1 && j != n - 1) {
                    if (obstacleGrid[i][j] == 0) {
                        dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
                    } else {
                        dp[i][j] = 0;
                    }
                }
            }
        }

        // 4. 返回结果
        // 返回从左上角 (0, 0) 到达右下角的不同路径数
        return dp[0][0];
    }
}
