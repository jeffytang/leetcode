package com.twq.dp;

/**
 * 不同路径
 *
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 *
 * 问总共有多少条不同的路径？
 *
 * 例如，上图是一个7 x 3 的网格。有多少可能的路径？
 *
 * 示例 1:
 *
 * 输入: m = 3, n = 2
 * 输出: 3
 * 解释:
 * 从左上角开始，总共有 3 条路径可以到达右下角。
 * 1. 向右 -> 向右 -> 向下
 * 2. 向右 -> 向下 -> 向右
 * 3. 向下 -> 向右 -> 向右
 * 示例 2:
 *
 * 输入: m = 7, n = 3
 * 输出: 28
 *  
 *
 * 提示：
 *
 * 1 <= m, n <= 100
 * 题目数据保证答案小于等于 2 * 10 ^ 9
 *
 * 链接：https://leetcode-cn.com/problems/unique-paths
 */
public class _62_UniquePaths {
    // 动态规划，自底朝上
    public int uniquePaths(int m, int n) {
        // 1. 状态定义
        // dp[i][j]：表示从点 (i, j) 到达右下角不同路径数
        int[][] dp = new int[m][n];

        // 2. 状态初始化
        // 从最后一列的每个点到达右下角只有向下这一条路径
        for (int i = 0; i < m; i++) dp[i][n - 1] = 1;
        // 从最后一行的每一个点到达右下角只有向右这一条路径
        for (int i = 0; i < n; i++) dp[m - 1][i] = 1;

        // 3. 状态转移方程
        // dp[i][j] = dp[i][j + 1] + dp[i + 1][j]，表达含义是：
        // 从点 (i, j) 到达右下角不同路径数等于下面两个路径数之和：
        //  1. 从 (i, j) 向右移动一格，即点 (i, j + 1) 到达右下角的路径数
        //  2. 从 (i, j) 向下移动一格，即点 (i + 1, j) 到达右下角的路径数
        for (int i = m - 2; i >= 0; i--) {
            for (int j = n - 2; j >= 0; j--) {
                dp[i][j] = dp[i][j + 1] + dp[i + 1][j];
            }
        }

        // 4. 返回结果
        // 返回从左上角 (0, 0) 到达右下角的不同路径数
        return dp[0][0];
    }
}
